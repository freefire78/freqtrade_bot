import subprocess
import os
import time
import threading
import json
from flask import Flask

keep_alive_app = Flask(__name__)

@keep_alive_app.route('/')
def home():
    return "ü§ñ FreqTrade Bot is alive!"

def run_keep_alive():
    keep_alive_app.run(host='0.0.0.0', port=8080)

def start_keep_alive():
    t = threading.Thread(target=run_keep_alive)
    t.daemon = True
    t.start()
    print("üîÑ Keep-alive server started")

def run_freqtrade():
    print("üöÄ Starting FreqTrade with detailed logging...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º verbose –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ —Ñ–∞–π–ª
        process = subprocess.Popen([
            'freqtrade', 'webserver',
            '--config', 'user_data/config.json',
            '--userdir', 'user_data',
            '-vvv',  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤
            '--logfile', 'freqtrade_debug.log'  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        print("‚è≥ FreqTrade process started...")
        print("üìù Detailed logs in freqtrade_debug.log")
        
        # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(f"FreqTrade: {output.strip()}")
        
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ–º stderr
        stderr_output = process.stderr.read()
        if stderr_output:
            print(f"‚ùå FreqTrade STDERR: {stderr_output}")
            
        returncode = process.poll()
        print(f"üîÑ FreqTrade exited with code: {returncode}")
        
    except Exception as e:
        print(f"‚ùå Process Error: {e}")

if __name__ == "__main__":
    print("==========================================")
    print("ü§ñ FreqTrade Bot - Debug Mode")
    print("==========================================")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
    config_path = 'user_data/config.json'
    if os.path.exists(config_path):
        file_size = os.path.getsize(config_path)
        print(f"üìÑ Config file exists, size: {file_size} bytes")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config_content = f.read()
                config = json.loads(config_content)
                print("‚úÖ Config JSON syntax is valid!")
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON Error: {e}")
        except Exception as e:
            print(f"‚ùå File Error: {e}")
    else:
        print("‚ùå Config file not found!")
    
    start_keep_alive()
    time.sleep(2)
    run_freqtrade()