import subprocess
import os
import sys
import signal
import time
import threading
import requests
from background import keep_alive

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_status = "stopped"
bot_process = None
freqtrade_port = 8000
keep_alive_port = 8080

def run_freqtrade():
    """–ó–∞–ø—É—Å–∫ FreqTrade –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    global bot_status, bot_process
    
    try:
        print("üöÄ Starting FreqTrade Web Interface...")
        bot_status = "starting"
        
        print(f"üåê FreqTrade UI will be on port {freqtrade_port}")
        print(f"üîó Keep-alive server on port {keep_alive_port}")
        print("üìù All logs visible in Render dashboard")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º FreqTrade –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        bot_process = subprocess.Popen([
            'freqtrade', 'webserver',
            '--config', 'config.json',
            '--strategy-path', 'strategies', 
            '--port', str(freqtrade_port),
            '--verbose'
        ])
        
        bot_status = "running"
        print("‚úÖ FreqTrade is now RUNNING")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        bot_process.wait()
        
    except Exception as e:
        bot_status = "error"
        print(f"‚ùå Error starting FreqTrade: {e}")
    finally:
        bot_status = "stopped"
        print("üõë FreqTrade stopped")

def start_keep_alive_ping():
    """–ü–∏–Ω–≥ —Å–∞–º–æ–≥–æ —Å–µ–±—è —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–Ω"""
    def ping_loop():
        time.sleep(10)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        
        # –ü–æ–ª—É—á–∞–µ–º URL –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±—É–¥–µ—Ç –∏–∑–≤–µ—Å—Ç–µ–Ω –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)
        render_url = os.environ.get('RENDER_URL', '')
        
        while True:
            try:
                # –ü–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ FreqTrade
                response1 = requests.get(f'http://0.0.0.0:{freqtrade_port}/', timeout=10)
                print(f"üîÑ FreqTrade ping: {response1.status_code}")
                
                # –ü–∏–Ω–≥ keep-alive –ø–æ—Ä—Ç–∞
                response2 = requests.get(f'http://0.0.0.0:{keep_alive_port}/', timeout=10)
                print(f"üîÑ Keep-alive ping: {response2.status_code}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Ping error: {e}")
            
            # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
            time.sleep(300)
    
    ping_thread = threading.Thread(target=ping_loop, daemon=True)
    ping_thread.start()
    print("üîÑ Auto-ping service started")

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global bot_process, bot_status
    
    print("üõë Received shutdown signal...")
    bot_status = "stopping"
    
    if bot_process:
        print("Terminating FreqTrade process...")
        bot_process.terminate()
        bot_process.wait()
    
    print("üëã Shutdown complete")
    sys.exit(0)

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("=" * 60)
    print("ü§ñ FreqTrade Bot with 24/7 Keep-Alive System")
    print("üîÑ Background server will prevent auto-sleep")
    print("‚úÖ Suitable for continuous operation")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive Flask —Å–µ—Ä–≤–µ—Ä
    keep_alive()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ-–ø–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å
    start_keep_alive_ping()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FreqTrade
    run_freqtrade()